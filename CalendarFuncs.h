#ifndef CALENDAR_FUNCS_H
#define CALENDAR_FUNCS_H

// Generated by AI
#include <time.h>

// Check if a year is a leap year
bool isLeapYear(int year) {
  return (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));
}

// Days in each month
int daysInMonth(int month, int year) {
  int daysPerMonth[] = {31,28,31,30,31,30,31,31,30,31,30,31};
  if (month == 2 && isLeapYear(year)) return 29;
  return daysPerMonth[month - 1];
}

// Get the next solstice date (Northern Hemisphere)
struct Solstice {
  int month;
  int day;
};

Solstice getNextSolstice(int year, int month, int day) {
  Solstice summer = {6, 21};  // June solstice
  Solstice winter = {12, 21}; // December solstice

  if (month < summer.month || (month == summer.month && day < summer.day)) {
    return summer;
  } else if (month < winter.month || (month == winter.month && day < winter.day)) {
    return winter;
  } else {
    // Next year's summer solstice
    return summer;
  }
}

/**
 * Calculate what day of the year it is
 * where January 1st is the first day of the year.
 */
int calculateDayOfYear(int year, int month, int day) {
  int doy = 0;
  for (int m = 0; m < month; m++)
  {
    doy += daysInMonth(m, year);
  }
  doy += day;
  return doy;
}

/**
 * Roughly calculate the current week of the year by 
 * just dividing the day of year by 7.
 * Result: x / 52
 */
int calculateWeekOfYear(int year, int month, int day) {
  return ceil(calculateDayOfYear(year, month, day) / 7);
}

// Calculate days until next solstice
int daysUntilNextSolstice(int year, int month, int day) {
  Solstice next = getNextSolstice(year, month, day);
  int doyToday = calculateDayOfYear(year, month, day);
  int doyNext = calculateDayOfYear(year, next.month, next.day);

  if (doyNext >= doyToday) {
    return doyNext - doyToday;
  } else {
    // Next year's solstice
    int daysInYear = isLeapYear(year) ? 366 : 365;
    return (daysInYear - doyToday) + calculateDayOfYear(year + 1, next.month, next.day);
  }
}

#endif